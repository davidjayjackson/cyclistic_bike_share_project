{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Importing CSV Files Using Python\"\n",
        "date: \"2024-11-22\"\n",
        "format: html\n",
        "jupyter: python3\n",
        "---\n",
        "\n",
        "# Load Usual Suspects\n"
      ],
      "id": "e1d9592b"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import os\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "# ```\n",
        "# Load 12 Monthly CSV Files\n",
        "\n",
        "# ```{python}\n",
        "directory_path = 'bike_rides'\n",
        "\n",
        "# List to hold dataframes\n",
        "dataframes = []\n",
        "\n",
        "# Loop through all files in the directory\n",
        "for filename in os.listdir(directory_path):\n",
        "    if filename.endswith(\".csv\"):\n",
        "        file_path = os.path.join(directory_path, filename)\n",
        "        # Read the CSV file into a DataFrame and append it to the list\n",
        "        df = pd.read_csv(file_path)\n",
        "        dataframes.append(df)\n",
        "\n",
        "# Combine all DataFrames into a single DataFrame\n",
        "combined_df = pd.concat(dataframes, ignore_index=True)\n",
        "\n",
        "# Display the resulting DataFrame\n",
        "print(combined_df.head())\n",
        "# ```\n",
        "# Data Wrangling steps\n",
        "<!-- \n",
        "(1) Remove Rows with missing start_station_name or end_stations\n",
        "(2) Extract start(start_date) and end dates(end_date) from started_at and ended_at columns\n",
        "(3) Only keep rows/rides where start_date and end_date are the same.\n",
        "(4) Extract start_hour from started_at\n",
        "-->\n",
        "# ```{python}\n",
        "combined_df.size\n",
        "# Check for missing values in each column\n",
        "missing_values = combined_df.isnull().sum()\n",
        "missing_values\n",
        "rides = combined_df.dropna(subset=['start_station_name', 'end_station_name'])\n",
        "# ```\n",
        "# ```{python}\n",
        "# Ensure the datetime columns are in proper datetime format\n",
        "rides['started_at'] = pd.to_datetime(rides['started_at'])\n",
        "rides['ended_at'] = pd.to_datetime(rides['ended_at'])\n",
        "\n",
        "# Extract start_date and end_date as the date part of started_at and ended_at\n",
        "rides = rides.copy()  # Ensure we are working with a fresh copy\n",
        "rides['start_date'] = rides['started_at'].dt.date\n",
        "rides['end_date'] = rides['ended_at'].dt.date\n",
        "\n",
        "# Filter rows where start_date and end_date are the same\n",
        "same_day_rides = rides.loc[rides['start_date'] == rides['end_date']]\n",
        "\n",
        "# Display the filtered DataFrame\n",
        "print(\"Rides with the same start and end dates:\")\n",
        "print(same_day_rides)\n"
      ],
      "id": "7d625559",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\Owner\\miniconda3\\envs\\py_cyclistic\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}